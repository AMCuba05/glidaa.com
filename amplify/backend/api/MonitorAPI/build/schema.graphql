type UserActivity {
  id: ID!
  phone: String!
  cursorPosition: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserActivityConnection {
  items: [UserActivity]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserActivityFilterInput {
  id: ModelIDInput
  phone: ModelStringInput
  cursorPosition: ModelStringInput
  and: [ModelUserActivityFilterInput]
  or: [ModelUserActivityFilterInput]
  not: ModelUserActivityFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUserActivity(id: ID!): UserActivity
  listUserActivitys(filter: ModelUserActivityFilterInput, limit: Int, nextToken: String): ModelUserActivityConnection
}

input CreateUserActivityInput {
  id: ID
  phone: String!
  cursorPosition: String
}

input UpdateUserActivityInput {
  id: ID!
  phone: String
  cursorPosition: String
}

input DeleteUserActivityInput {
  id: ID
}

type Mutation {
  createUserActivity(input: CreateUserActivityInput!, condition: ModelUserActivityConditionInput): UserActivity
  updateUserActivity(input: UpdateUserActivityInput!, condition: ModelUserActivityConditionInput): UserActivity
  deleteUserActivity(input: DeleteUserActivityInput!, condition: ModelUserActivityConditionInput): UserActivity
}

input ModelUserActivityConditionInput {
  phone: ModelStringInput
  cursorPosition: ModelStringInput
  and: [ModelUserActivityConditionInput]
  or: [ModelUserActivityConditionInput]
  not: ModelUserActivityConditionInput
}

type Subscription {
  onCreateUserActivity: UserActivity @aws_subscribe(mutations: ["createUserActivity"])
  onUpdateUserActivity: UserActivity @aws_subscribe(mutations: ["updateUserActivity"])
  onDeleteUserActivity: UserActivity @aws_subscribe(mutations: ["deleteUserActivity"])
}
